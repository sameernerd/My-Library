/*
 * Remember a 7.0 student can know more than a 10.0 student.
 * Grades don't determine intelligence, they test obedience. 
 * I Never Give Up.
 */
import java.util.*;
import java.util.Map.Entry;
import java.io.*;
import java.text.*;

import static java.lang.System.out;
import static java.util.Arrays.*;
import static java.lang.Math.*;
public class ContestMain {
	private static Reader in=new Reader();
	private static StringBuilder ans=new StringBuilder();
	private static long MOD=1000000007;//10^9+7 
	private static final int N=100000; //10^5
//	private static final int LIM=26;
//	private static final double PI=3.1415;
//	private static ArrayList<Integer> v[]=new ArrayList[N];
//	private static int color[]=new int[N]; //For Graph Coloring
//	private static boolean mark[]=new boolean[N];
//	private static BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
//	private static void dfs(int node){mark[node]=true;for(int x:v[node]){if(!mark[x]){dfs(x,v);}}}
//	private static long powmod(long x,long n,long m){
//		if(n==0)return 1;
//		else if(n%2==0)return(powmod((x*x)%m,n/2,m));
//		else return (x*(powmod((x*x)%m,(n-1)/2,m)))%m;
//	}
//	private static void shuffle(long [] arr) {
//		for (int i = arr.length - 1; i >= 2; i--) {
//			int x = new Random().nextInt(i - 1);
//	        long temp = arr[x];
//	        arr[x] = arr[i];
//	        arr[i] = temp;
//	    }
//	 }
//	private static void swap(int i,int j,int ar[]){
//		int temp=ar[i];
//		ar[i]=ar[j];
//		ar[j]=temp;
//	}
	private static long gcd(long a, long b){
		if(b==0)return a;
		return gcd(b,a%b);
	}
	private static int matrix[][]=new int[8][8];
	private static int queens[][]=new int[8][2];
	private static ArrayList<String> nqueen=new ArrayList();
	private static void solve(int ind){
		int i=ind,k=0;
		if(ind<8){
			for(int j=0;j<8;j++){
				for(k=0;k<ind;k++){
					if(i==queens[k][0]||j==queens[k][1])break;
					else if(j<queens[k][1]&&i+j==queens[k][0]+queens[k][1])break;
					else if(j>queens[k][1]&&i-j==queens[k][0]-queens[k][1])break;
				}
				if(k==ind){
					matrix[i][j]=1;
					queens[i][0]=i;
					queens[i][1]=j;
					solve(i+1);
					matrix[i][j]=0;
				}
			}
		}
		else{
			String s="";
			for(int x=0;x<8;x++){
				for(int y=0;y<8;y++){
					if(matrix[x][y]==1){
						s+=x+" "+y+" ";
					}
				}
			}
			nqueen.add(s);
		}
	}
	public static void main(String[] args) throws IOException{
		for(int i=0;i<8;i++){
			matrix[0][i]=1;
			queens[0][0]=0;
			queens[0][1]=i;
			solve(1);
			matrix[0][i]=0;
		}
		int k=in.nextInt();
		int ar[][]=new int[8][8];
		String num[];
		long sum,temp;
		while(k-->0){
			for(int i=0;i<8;i++){
				for(int j=0;j<8;j++)
					ar[i][j]=in.nextInt();
			}
			sum=0;
			for(int i=0;i<nqueen.size();i++){
				num=nqueen.get(i).split(" ");
				temp=0;
				for(int j=0;j<num.length-1;j+=2){
					temp+=ar[Integer.parseInt(num[j])][Integer.parseInt(num[j+1])];
				}
				sum=max(sum,temp);
			}
			out.printf("%5d\n",sum);
		}
	}
	static class Pair<T> implements Comparable<Pair>{
		int l;
		int r;
		Pair(){
			l=0;
			r=0;
		}
		Pair(int k,int v,int a){
			l=k;
			r=v;
		}
		@Override
		public int compareTo(Pair o) {
			if(o.l!=l)return (int) (l-o.l);
			else return (r-o.r);
		}
		
	}
	static class Reader{
        BufferedReader br;
        StringTokenizer st;
        public Reader()
        {
            br = new BufferedReader(new
                     InputStreamReader(System.in));
        }
 
        String next()
        {
            while (st == null || !st.hasMoreElements())
            {
                try
                {
     
                	st = new StringTokenizer(br.readLine());
                }
                catch (IOException  e)
                {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }
 
        int nextInt()
        {
            return Integer.parseInt(next());
        }
 
        long nextLong()
        {
            return Long.parseLong(next());
        }
 
        double nextDouble()
        {
            return Double.parseDouble(next());
        }
 
        String nextLine()
        {
            String str = "";
            try
            {
                str = br.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
    }
}
