/*
 * Remember a 7.0 student can know more than a 10.0 student.
 * Grades don't determine intelligence, they test obedience. 
 * I Never Give Up.
 */
 /* We can simply solve it by checking all the possbile 2^n possibiliies.The code written down is using bitmask and its not necessay.
 But I enjoyed writing it */
import java.util.*;
import java.util.Map.Entry;
import java.io.*;
import java.text.*;

import static java.lang.System.out;
import static java.util.Arrays.*;
import static java.lang.Math.*;
public class Main {
	private static Reader in=new Reader();
	private static StringBuilder ans=new StringBuilder();
	private static long MOD=1000000000+7;//10^9+7
	private static final int N=100000+7; //10^5+7
//	private static final int LIM=26;
//	private static final double PI=3.1415;
//	private static ArrayList<Integer> v[]=new ArrayList[N];
//	private static int color[]=new int[N];
//	private static boolean mark[]=new boolean[N];
//	private static BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
//	private static void dfs(int node){mark[node]=true;for(int x:v[node]){if(!mark[x]){dfs(x);}}}
	private static long powmod(long x,long n){
		if(n==0||x==0)return 1;
		else if(n%2==0)return(powmod((x*x)%MOD,n/2));
		else return (x*(powmod((x*x)%MOD,(n-1)/2)))%MOD;
	}
//	private static void shuffle(long [] arr) {
//		for (int i = arr.length - 1; i >= 2; i--) {
//			int x = new Random().nextInt(i - 1);
//	        long temp = arr[x];
//	        arr[x] = arr[i];
//	        arr[i] = temp;
//	    }
//	 }
	private static long gcd(long a, long b){
		if(b==0)return a;
		return gcd(b,a%b);
	}
//	private static boolean check(int x,int y){
//		if((x>=0&&x<n)&&(y>=0&&y<m)&&mat[x][y]!='X'&&!visited[x][y])return true;
//		return false;
//	}
//	static class Node{
//		int x,y,c;
//		Node(int x,int y,int c){
//			this.x=x;
//			this.y=y;
//			this.c=c;
//		}
//	}
	static int n,r;
	static ArrayList<Integer> com=new ArrayList();
	static boolean flag[]=new boolean[100000000];
	private static void solve(int mask,int cnt){
		if(cnt==r){
			com.add(mask);
			return;
		}
		int newmask;
		for(int i=0;i<n;i++){
			newmask=mask|1<<i;
			if(!flag[newmask]){
				flag[newmask]=true;
				solve(newmask,cnt+1);
			}
		}
	}
	public static void main(String[] args) throws IOException{
		int cnt=1;
		while(true){
			n=in.nextInt();
			r=in.nextInt();
			if(n==0)break;
			float ar[][]=new float[n][2];
			for(int i=0;i<n;i++){
				ar[i][0]=(float) in.nextDouble();
				ar[i][1]=1-ar[i][0];
			}
			solve(0,0);
			double total=0,indv=0,temp;
			for(int i=0;i<com.size();i++){
				temp=1;
				for(int j=0;j<n;j++){
					if((com.get(i)&1<<j)!=0)temp*=ar[j][0];
					else temp*=ar[j][1];
//					out.println(i+" "+j+" "+temp);
				}
//				out.println(temp);
				total+=temp;
			}
			out.printf("Case "+cnt+":\n");
			for(int i=0;i<n;i++){
				indv=0;
				for(int j=0;j<com.size();j++){
					if((com.get(j)&1<<i)!=0){
						temp=1;
						for(int k=0;k<n;k++){
							if((com.get(j)&1<<k)!=0)temp*=ar[k][0];
							else temp*=ar[k][1];
						}
						indv+=temp;
					}
				}
				out.printf("%.6f\n",indv/total);
			}
			fill(flag,false);
			com.clear();
			cnt++;
		}
	}
	static class Pair<T> implements Comparable<Pair>{
		int l;
		int r;
		Pair(){
			l=0;
			r=0;
		}
		Pair(int k,int v){
			l=k;
			r=v;
		}
		@Override
		public int compareTo(Pair o) {
			if(o.l!=l)return (int) (l-o.l);
			else return (r-o.r);
		}
		
	}
	static class Reader{
        BufferedReader br;
        StringTokenizer st;
        public Reader()
        {
            br = new BufferedReader(new
                     InputStreamReader(System.in));
        }
 
        String next()
        {
            while (st == null || !st.hasMoreElements())
            {
                try
                {
     
                	st = new StringTokenizer(br.readLine());
                }
                catch (IOException  e)
                {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }
 
        int nextInt()
        {
            return Integer.parseInt(next());
        }
 
        long nextLong()
        {
            return Long.parseLong(next());
        }
 
        double nextDouble()
        {
            return Double.parseDouble(next());
        }
 
        String nextLine()
        {
            String str = "";
            try
            {
                str = br.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
    }
}
